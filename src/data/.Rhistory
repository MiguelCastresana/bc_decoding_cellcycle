# Pivot wider, aggregating duplicates using max (or change as needed)
pivot_wider(names_from = col, values_from = result,
values_fn = max, values_fill = list(result = 0)) %>%
# Ensure unique row names
distinct(row, .keep_all = TRUE) %>%
column_to_rownames("row") %>%
as.matrix()
View(resultado)
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_discovery_across/comparaciones_discovery_grn_rss_1_5_auc_005")
comparaciones_discovery_grn <- comparaciones1
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_validation_across/comparaciones_validation_grn_rss_1_5_auc_005")
comparaciones_validation_grn <- comparaciones1
# Extract common row and column names
common_rownames <- union(rownames(comparaciones_discovery_grn), rownames(comparaciones_validation_grn))
common_colnames <- union(colnames(comparaciones_discovery_grn), colnames(comparaciones_validation_grn))
# A tidyverse function to reformat a matrix to have given rows and columns
reformat_matrix <- function(mat, common_rows, common_cols) {
mat %>%
as_tibble(rownames = "row") %>%                     # Convert to tibble with rownames in column "row"
pivot_longer(-row, names_to = "col", values_to = "value") %>%
complete(row = common_rows, col = common_cols,
fill = list(value = NA)) %>%               # Ensure all rows and columns are present
pivot_wider(names_from = col, values_from = value) %>%
arrange(match(row, common_rows)) -> df_wide         # Order rows based on common_rows
mat_out <- df_wide %>% select(-row) %>% as.matrix()
rownames(mat_out) <- df_wide$row
return(mat_out)
}
# Reformat both matrices
comparaciones_discovery_grn <- reformat_matrix(comparaciones_discovery_grn, common_rownames, common_colnames)
comparaciones_validation_grn <- reformat_matrix(comparaciones_validation_grn, common_rownames, common_colnames)
# Convert NA values to 0 using tidyverse (we convert to tibble and back to matrix)
fix_na <- function(mat) {
mat %>%
as_tibble(rownames = "row") %>%
mutate(across(-row, ~replace_na(.x, 0))) %>%
pivot_longer(-row, names_to = "col", values_to = "value") %>%
pivot_wider(names_from = col, values_from = value) %>%
arrange(match(row, rownames(mat))) %>%
{ as.matrix(select(., -row)) -> m;
rownames(m) <- .$row; m }
}
comparaciones_discovery_grn <- fix_na(comparaciones_discovery_grn)
comparaciones_validation_grn <- fix_na(comparaciones_validation_grn)
resultado <- list(
discovery = comparaciones_discovery_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "disc"),
validation = comparaciones_validation_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "val")
) %>%
purrr::reduce(left_join, by = c("row", "col")) %>%
mutate(result = case_when(
disc == 1 & val == 1 ~ 2,  # Intersection
disc == 1 | val == 1 ~ 1,  # Union
TRUE ~ 0
)) %>%
# Pivot wider, aggregating duplicates using max (or change as needed)
pivot_wider(names_from = col, values_from = result,
values_fn = max, values_fill = list(result = 0)) %>%
# Ensure unique row names
distinct(row, .keep_all = TRUE) %>%
column_to_rownames("row") %>%
as.matrix()
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_discovery_across/comparaciones_discovery_grn_rss_1_5_auc_005")
comparaciones_discovery_grn <- comparaciones1
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_validation_across/comparaciones_validation_grn_rss_1_5_auc_005")
comparaciones_validation_grn <- comparaciones1
# Extract row and column names
common_rownames <- union(rownames(comparaciones_discovery_grn), rownames(comparaciones_validation_grn))
common_colnames <- union(colnames(comparaciones_discovery_grn), colnames(comparaciones_validation_grn))
# Function to ensure both matrices have the same dimensions
reformat_matrix <- function(mat, common_rows, common_cols) {
mat <- as.matrix(mat)  # Ensure it's a matrix
missing_rows <- setdiff(common_rows, rownames(mat))
missing_cols <- setdiff(common_cols, colnames(mat))
# Create an expanded matrix filled with NA
mat_fixed <- matrix(NA, nrow = length(common_rows), ncol = length(common_cols),
dimnames = list(common_rows, common_cols))
# Copy values from the original matrix
mat_fixed[rownames(mat), colnames(mat)] <- mat
return(mat_fixed)
}
# Reformat both matrices to have identical row and column names
comparaciones_discovery_grn <- reformat_matrix(comparaciones_discovery_grn, common_rownames, common_colnames)
comparaciones_validation_grn <- reformat_matrix(comparaciones_validation_grn, common_rownames, common_colnames)
# Convert NA to 0
comparaciones_discovery_grn[is.na(comparaciones_discovery_grn)] <- 0
comparaciones_validation_grn[is.na(comparaciones_validation_grn)] <- 0
# Create result matrix
resultado <- matrix(0, nrow = nrow(comparaciones_discovery_grn), ncol = ncol(comparaciones_discovery_grn),
dimnames = dimnames(comparaciones_discovery_grn))
# Apply logical operations
resultado[(comparaciones_discovery_grn == 1) | (comparaciones_validation_grn == 1)] <- 1  # Union
resultado[(comparaciones_discovery_grn == 1) & (comparaciones_validation_grn == 1)] <- 2  # Intersection
View(resultado)
resultado_old = resultado
table(unlist(resultado))
# ðŸ“Œ Load the phase and no-phase datasets
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/intersection/GRN_phase_rss_1_5_auc_005")
comparaciones_phase <- as.data.frame(resultado)
table(unlist(comparaciones_phase))
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/intersection/GRN_nophase_rss_1_5_auc_005")
comparaciones_nophase <- as.data.frame(resultado)
# Ensure row names are correctly assigned
comparaciones_phase$row_name <- rownames(comparaciones_phase)
comparaciones_nophase$row_name <- rownames(comparaciones_nophase)
# Merge both datasets, ensuring all rows are included
comparaciones_combined <- full_join(comparaciones_nophase, comparaciones_phase, by = "row_name")
# Ensure no empty column remains
if ("row_name" %in% colnames(comparaciones_combined)) {
rownames(comparaciones_combined) <- comparaciones_combined$row_name
comparaciones_combined <- comparaciones_combined[, !(colnames(comparaciones_combined) %in% c("row_name"))]
}
# ðŸ“Œ Reorder columns based on expected groups
target_order <- c("LumA", "LumA G1", "LumA S", "LumA G2M",
"LumB", "LumB G1", "LumB S", "LumB G2M",
"Her2", "Her2 G1", "Her2 S", "Her2 G2M",
"Basal", "Basal G1", "Basal S", "Basal G2M")
# Ensure all target columns exist before reordering
target_order <- intersect(target_order, colnames(comparaciones_combined))
comparaciones_final <- dplyr::select(comparaciones_combined, all_of(target_order))
# Convert NA values to 0
comparaciones_final[is.na(comparaciones_final)] <- 0
# Convert all values of 1 to 0 (is this intended?)
comparaciones_final[comparaciones_final == 1] <- 0
# ðŸ“Œ Define function to apply phase conditions
apply_conditions <- function(data) {
apply(data, 1, function(row) {
if (row[1] != 0 && all(row[2:4] == 0)) {
return(1)  # Belongs to global but not specific phases
} else if (row[1] == 0 && any(row[2:4] != 0)) {
return(-1)  # Belongs to specific phases but not global
} else {
return(NA)  # No significant difference
}
})
}
# Apply to different subgroups
result1 <- apply_conditions(comparaciones_final[, c(1, 2, 3, 4)])
result2 <- apply_conditions(comparaciones_final[, c(5, 6, 7, 8)])
result3 <- apply_conditions(comparaciones_final[, c(9, 10, 11, 12)])
result4 <- apply_conditions(comparaciones_final[, c(13, 14, 15, 16)])
# Store results
results <- data.frame(
Comparison1 = result1,
Comparison2 = result2,
Comparison3 = result3,
Comparison4 = result4
)
print(results)
# ðŸ“Œ NO PHASE: Get indices of non-zero elements
apply_conditions_nophase <- function(data) {
return(which(data != 0))
}
result1 <- apply_conditions_nophase(comparaciones_final[, c(1)])
result2 <- apply_conditions_nophase(comparaciones_final[, c(5)]) + nrow(comparaciones_final[, c(2, 3, 4)])
result3 <- apply_conditions_nophase(comparaciones_final[, c(9)]) + 2 * nrow(comparaciones_final[, c(2, 3, 4)])
result4 <- apply_conditions_nophase(comparaciones_final[, c(13)]) + 3 * nrow(comparaciones_final[, c(2, 3, 4)])
nophase <- c(result1, result2, result3, result4)
# ðŸ“Œ PHASE: Get indices where any non-zero value is present
apply_conditions_phase <- function(data) {
data <- apply(data, 1, function(row) {
if (any(row != 0)) 1 else 0
})
return(which(data == 1))
}
result1 <- apply_conditions_phase(comparaciones_final[, c(2, 3, 4)])
result2 <- apply_conditions_phase(comparaciones_final[, c(6, 7, 8)]) + nrow(comparaciones_final[, c(2, 3, 4)])
result3 <- apply_conditions_phase(comparaciones_final[, c(10, 11, 12)]) + 2 * nrow(comparaciones_final[, c(2, 3, 4)])
result4 <- apply_conditions_phase(comparaciones_final[, c(14, 15, 16)]) + 3 * nrow(comparaciones_final[, c(2, 3, 4)])
phase <- c(result1, result2, result3, result4)
# ðŸ“Œ Generate Venn Diagram
x <- list(A = nophase, B = phase)
ggvenn(
x,
fill_color = c("#0073C2FF", "#EFC000FF"),
stroke_size = 0.5, set_name_size = 2
)
# Load networks
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_discovery_across/comparaciones_discovery_grn_rss_1_5_auc_005")
comparaciones_discovery_grn <- comparaciones1
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_validation_across/comparaciones_validation_grn_rss_1_5_auc_005")
comparaciones_validation_grn <- comparaciones1
# Extract row and column names
common_rownames <- union(rownames(comparaciones_discovery_grn), rownames(comparaciones_validation_grn))
common_colnames <- union(colnames(comparaciones_discovery_grn), colnames(comparaciones_validation_grn))
# Function to ensure both matrices have the same dimensions
reformat_matrix <- function(mat, common_rows, common_cols) {
mat <- as.matrix(mat)  # Ensure it's a matrix
missing_rows <- setdiff(common_rows, rownames(mat))
missing_cols <- setdiff(common_cols, colnames(mat))
# Create an expanded matrix filled with NA
mat_fixed <- matrix(NA, nrow = length(common_rows), ncol = length(common_cols),
dimnames = list(common_rows, common_cols))
# Copy values from the original matrix
mat_fixed[rownames(mat), colnames(mat)] <- mat
return(mat_fixed)
}
# Reformat both matrices to have identical row and column names
comparaciones_discovery_grn <- reformat_matrix(comparaciones_discovery_grn, common_rownames, common_colnames)
comparaciones_validation_grn <- reformat_matrix(comparaciones_validation_grn, common_rownames, common_colnames)
# Convert NA to 0
comparaciones_discovery_grn[is.na(comparaciones_discovery_grn)] <- 0
comparaciones_validation_grn[is.na(comparaciones_validation_grn)] <- 0
# Create result matrix
resultado <- matrix(0, nrow = nrow(comparaciones_discovery_grn), ncol = ncol(comparaciones_discovery_grn),
dimnames = dimnames(comparaciones_discovery_grn))
# Apply logical operations
resultado[(comparaciones_discovery_grn == 1) | (comparaciones_validation_grn == 1)] <- 1  # Union
resultado[(comparaciones_discovery_grn == 1) & (comparaciones_validation_grn == 1)] <- 2  # Intersection
# ðŸ“Œ Load the phase and no-phase datasets
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/intersection/GRN_phase_rss_1_5_auc_005")
comparaciones_phase <- as.data.frame(resultado)
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/intersection/GRN_nophase_rss_1_5_auc_005")
comparaciones_nophase <- as.data.frame(resultado)
# Ensure row names are correctly assigned
comparaciones_phase$row_name <- rownames(comparaciones_phase)
comparaciones_nophase$row_name <- rownames(comparaciones_nophase)
# Merge both datasets, ensuring all rows are included
comparaciones_combined <- full_join(comparaciones_nophase, comparaciones_phase, by = "row_name")
# Ensure no empty column remains
if ("row_name" %in% colnames(comparaciones_combined)) {
rownames(comparaciones_combined) <- comparaciones_combined$row_name
comparaciones_combined <- comparaciones_combined[, !(colnames(comparaciones_combined) %in% c("row_name"))]
}
# ðŸ“Œ Reorder columns based on expected groups
target_order <- c("LumA", "LumA G1", "LumA S", "LumA G2M",
"LumB", "LumB G1", "LumB S", "LumB G2M",
"Her2", "Her2 G1", "Her2 S", "Her2 G2M",
"Basal", "Basal G1", "Basal S", "Basal G2M")
# Ensure all target columns exist before reordering
target_order <- intersect(target_order, colnames(comparaciones_combined))
comparaciones_final <- dplyr::select(comparaciones_combined, all_of(target_order))
# Convert NA values to 0
comparaciones_final[is.na(comparaciones_final)] <- 0
# Convert all values of 1 to 0 (is this intended?)
comparaciones_final[comparaciones_final == 1] <- 0
View(comparaciones_final)
# ðŸ“Œ Define function to apply phase conditions
apply_conditions <- function(data) {
apply(data, 1, function(row) {
if (row[1] != 0 && all(row[2:4] == 0)) {
return(1)  # Belongs to global but not specific phases
} else if (row[1] == 0 && any(row[2:4] != 0)) {
return(-1)  # Belongs to specific phases but not global
} else {
return(NA)  # No significant difference
}
})
}
# Apply to different subgroups
result1 <- apply_conditions(comparaciones_final[, c(1, 2, 3, 4)])
result2 <- apply_conditions(comparaciones_final[, c(5, 6, 7, 8)])
result3 <- apply_conditions(comparaciones_final[, c(9, 10, 11, 12)])
result4 <- apply_conditions(comparaciones_final[, c(13, 14, 15, 16)])
# Store results
results <- data.frame(
Comparison1 = result1,
Comparison2 = result2,
Comparison3 = result3,
Comparison4 = result4
)
View(results)
# Overlap with no phases?
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_DEG//intersection/phases")
comparison_phase = as.data.frame(results)
# ðŸ“Œ Load the phase and no-phase datasets
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/intersection/GRN_phase_rss_1_5_auc_005")
comparaciones_phase <- as.data.frame(resultado)
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/intersection/GRN_nophase_rss_1_5_auc_005")
comparaciones_nophase <- as.data.frame(resultado)
# Ensure row names are correctly assigned
comparaciones_phase$row_name <- rownames(comparaciones_phase)
comparaciones_nophase$row_name <- rownames(comparaciones_nophase)
# Merge both datasets, ensuring all rows are included
comparaciones_combined <- full_join(comparaciones_nophase, comparaciones_phase, by = "row_name")
# Ensure no empty column remains
if ("row_name" %in% colnames(comparaciones_combined)) {
rownames(comparaciones_combined) <- comparaciones_combined$row_name
comparaciones_combined <- comparaciones_combined[, !(colnames(comparaciones_combined) %in% c("row_name"))]
}
# ðŸ“Œ Reorder columns based on expected groups
target_order <- c("LumA", "LumA G1", "LumA S", "LumA G2M",
"LumB", "LumB G1", "LumB S", "LumB G2M",
"Her2", "Her2 G1", "Her2 S", "Her2 G2M",
"Basal", "Basal G1", "Basal S", "Basal G2M")
# Ensure all target columns exist before reordering
target_order <- intersect(target_order, colnames(comparaciones_combined))
comparaciones_final <- dplyr::select(comparaciones_combined, all_of(target_order))
# Convert NA values to 0
comparaciones_final[is.na(comparaciones_final)] <- 0
# Convert all values of 1 to 0 (is this intended?)
comparaciones_final[comparaciones_final == 1] <- 0
View(comparaciones_final)
# Apply to different subgroups
result1 <- apply_conditions(comparaciones_final[, c(1, 2, 3, 4)])
result1
result2 <- apply_conditions(comparaciones_final[, c(5, 6, 7, 8)])
result3 <- apply_conditions(comparaciones_final[, c(9, 10, 11, 12)])
result4 <- apply_conditions(comparaciones_final[, c(13, 14, 15, 16)])
# Store results
results <- data.frame(
Comparison1 = result1,
Comparison2 = result2,
Comparison3 = result3,
Comparison4 = result4
)
table(unlist(results))
# ðŸ“Œ Define function to apply phase conditions
apply_conditions <- function(data) {
apply(data, 1, function(row) {
if (row[1] != 0 && all(row[2:4] == 0)) {
return(1)  # Belongs to global but not specific phases
} else if (row[1] == 0 && any(row[2:4] != 0)) {
return(-1)  # Belongs to specific phases but not global
} else {
return(2)  # In both
}
})
}
# Apply to different subgroups
result1 <- apply_conditions(comparaciones_final[, c(1, 2, 3, 4)])
result2 <- apply_conditions(comparaciones_final[, c(5, 6, 7, 8)])
result3 <- apply_conditions(comparaciones_final[, c(9, 10, 11, 12)])
result4 <- apply_conditions(comparaciones_final[, c(13, 14, 15, 16)])
# Store results
results <- data.frame(
Comparison1 = result1,
Comparison2 = result2,
Comparison3 = result3,
Comparison4 = result4
)
table(unlist(results))
# ðŸ“Œ Define function to apply phase conditions
apply_conditions <- function(data) {
apply(data, 1, function(row) {
if (row[1] != 0 && all(row[2:4] == 0)) {
return(1)  # Belongs to global but not specific phases
} else if (row[1] == 0 && any(row[2:4] != 0)) {
return(-1)  # Belongs to specific phases but not global
} else {
return(NA)  # In both
}
})
}
# Apply to different subgroups
result1 <- apply_conditions(comparaciones_final[, c(1, 2, 3, 4)])
result2 <- apply_conditions(comparaciones_final[, c(5, 6, 7, 8)])
result3 <- apply_conditions(comparaciones_final[, c(9, 10, 11, 12)])
result4 <- apply_conditions(comparaciones_final[, c(13, 14, 15, 16)])
# Store results
results <- data.frame(
Comparison1 = result1,
Comparison2 = result2,
Comparison3 = result3,
Comparison4 = result4
)
table(unlist(results))
# ðŸ“Œ NO PHASE: Get indices of non-zero elements
apply_conditions_nophase <- function(data) {
return(which(data != 0))
}
result1 <- apply_conditions_nophase(comparaciones_final[, c(1)])
nrow(comparaciones_final[, c(2, 3, 4)])
result1 <- apply_conditions_nophase(comparaciones_final[, c(1)])
result2 <- apply_conditions_nophase(comparaciones_final[, c(5)]) + nrow(comparaciones_final[, c(2, 3, 4)])
result3 <- apply_conditions_nophase(comparaciones_final[, c(9)]) + 2 * nrow(comparaciones_final[, c(2, 3, 4)])
result4 <- apply_conditions_nophase(comparaciones_final[, c(13)]) + 3 * nrow(comparaciones_final[, c(2, 3, 4)])
nophase <- c(result1, result2, result3, result4)
nophase
table(unlist(comparaciones_nophase))
length(nophase)
# ðŸ“Œ PHASE: Get indices where any non-zero value is present
apply_conditions_phase <- function(data) {
data <- apply(data, 1, function(row) {
if (any(row != 0)) 1 else 0
})
return(which(data == 1))
}
result1 <- apply_conditions_phase(comparaciones_final[, c(2, 3, 4)])
result2 <- apply_conditions_phase(comparaciones_final[, c(6, 7, 8)]) + nrow(comparaciones_final[, c(2, 3, 4)])
result3 <- apply_conditions_phase(comparaciones_final[, c(10, 11, 12)]) + 2 * nrow(comparaciones_final[, c(2, 3, 4)])
result4 <- apply_conditions_phase(comparaciones_final[, c(14, 15, 16)]) + 3 * nrow(comparaciones_final[, c(2, 3, 4)])
phase <- c(result1, result2, result3, result4)
phase
View(results)
# Load networks (assumes the loaded objects are named "comparaciones1")
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_discovery_across/comparaciones_discovery_grn_rss_1_5_auc_005")
comparaciones_discovery_grn <- comparaciones1
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_validation_across/comparaciones_validation_grn_rss_1_5_auc_005")
comparaciones_validation_grn <- comparaciones1
# Extract common row and column names
common_rownames <- union(rownames(comparaciones_discovery_grn), rownames(comparaciones_validation_grn))
common_colnames <- union(colnames(comparaciones_discovery_grn), colnames(comparaciones_validation_grn))
# A tidyverse function to reformat a matrix to have given rows and columns
reformat_matrix <- function(mat, common_rows, common_cols) {
mat %>%
as_tibble(rownames = "row") %>%                     # Convert to tibble with rownames in column "row"
pivot_longer(-row, names_to = "col", values_to = "value") %>%
complete(row = common_rows, col = common_cols,
fill = list(value = NA)) %>%               # Ensure all rows and columns are present
pivot_wider(names_from = col, values_from = value) %>%
arrange(match(row, common_rows)) -> df_wide         # Order rows based on common_rows
mat_out <- df_wide %>% select(-row) %>% as.matrix()
rownames(mat_out) <- df_wide$row
return(mat_out)
}
# Reformat both matrices
comparaciones_discovery_grn <- reformat_matrix(comparaciones_discovery_grn, common_rownames, common_colnames)
comparaciones_validation_grn <- reformat_matrix(comparaciones_validation_grn, common_rownames, common_colnames)
View(comparaciones_discovery_grn)
# Load networks (assumes the loaded objects are named "comparaciones1")
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_discovery_across/comparaciones_discovery_grn_rss_1_5_auc_005")
comparaciones_discovery_grn <- comparaciones1
View(comparaciones_discovery_grn)
# Load networks (assumes the loaded objects are named "comparaciones1")
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_discovery_across/comparaciones_discovery_grn_rss_1_5_auc_005")
comparaciones_discovery_grn <- comparaciones1
load("C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/results/results_network/scenic_validation_across/comparaciones_validation_grn_rss_1_5_auc_005")
comparaciones_validation_grn <- comparaciones1
# Extract common row and column names
common_rownames <- union(rownames(comparaciones_discovery_grn), rownames(comparaciones_validation_grn))
common_colnames <- union(colnames(comparaciones_discovery_grn), colnames(comparaciones_validation_grn))
# A tidyverse function to reformat a matrix to have given rows and columns
reformat_matrix <- function(mat, common_rows, common_cols) {
mat %>%
as_tibble(rownames = "row") %>%                     # Convert to tibble with rownames in column "row"
pivot_longer(-row, names_to = "col", values_to = "value") %>%
complete(row = common_rows, col = common_cols,
fill = list(value = NA)) %>%               # Ensure all rows and columns are present
pivot_wider(names_from = col, values_from = value) %>%
arrange(match(row, common_rows)) -> df_wide         # Order rows based on common_rows
mat_out <- df_wide %>% select(-row) %>% as.matrix()
rownames(mat_out) <- df_wide$row
return(mat_out)
}
# Reformat both matrices
comparaciones_discovery_grn <- reformat_matrix(comparaciones_discovery_grn, common_rownames, common_colnames)
comparaciones_validation_grn <- reformat_matrix(comparaciones_validation_grn, common_rownames, common_colnames)
View(comparaciones_validation_grn)
# Convert NA values to 0 using tidyverse (we convert to tibble and back to matrix)
fix_na <- function(mat) {
mat %>%
as_tibble(rownames = "row") %>%
mutate(across(-row, ~replace_na(.x, 0))) %>%
pivot_longer(-row, names_to = "col", values_to = "value") %>%
pivot_wider(names_from = col, values_from = value) %>%
arrange(match(row, rownames(mat))) %>%
{ as.matrix(select(., -row)) -> m;
rownames(m) <- .$row; m }
}
comparaciones_discovery_grn <- fix_na(comparaciones_discovery_grn)
comparaciones_validation_grn <- fix_na(comparaciones_validation_grn)
discovery = comparaciones_discovery_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "disc")
View(discovery)
validation = comparaciones_validation_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "val")
View(validation)
purrr::reduce(left_join, by = c("row", "col")) %>%
mutate(result = case_when(
disc == 1 & val == 1 ~ 2,  # Intersection
disc == 1 | val == 1 ~ 1,  # Union
TRUE ~ 0
))
resultado <- list(
discovery = comparaciones_discovery_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "disc"),
validation = comparaciones_validation_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "val")
) %>%
purrr::reduce(left_join, by = c("row", "col")) %>%
mutate(result = case_when(
disc == 1 & val == 1 ~ 2,  # Intersection
disc == 1 | val == 1 ~ 1,  # Union
TRUE ~ 0
)) %>%
# Pivot wider, aggregating duplicates using max (or change as needed)
pivot_wider(names_from = col, values_from = result,
values_fn = max, values_fill = list(result = 0)) %>%
# Ensure unique row names
distinct(row, .keep_all = TRUE) %>%
column_to_rownames("row") %>%
as.matrix()
resultado <- left_join(
comparaciones_discovery_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "disc"),
comparaciones_validation_grn %>%
as_tibble(rownames = "row") %>%
pivot_longer(-row, names_to = "col", values_to = "val"),
by = c("row", "col")
) %>%
mutate(result = case_when(
disc == 1 & val == 1 ~ 2,   # both have a hit
disc == 1 | val == 1 ~ 1,   # only one has a hit
TRUE ~ 0
)) %>%
select(row, col, result) %>%
pivot_wider(names_from = col, values_from = result) %>%
column_to_rownames("row") %>%
as.matrix()
table(unlist(resultado))
# Read the configuration file (adjust the path if necessary)
config_file_path <- "C:/Users/migcas/OneDrive - Karolinska Institutet/Desktop/omega_single_cell/src/repository/repository_final/GRN/config_intersection.yml"
config <- yaml::read_yaml(config_file_path)$default
